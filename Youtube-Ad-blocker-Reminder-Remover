// ==UserScript==
// @name         Remove Adblock Thing
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Removes Adblock Thing
// @author       JoelMatic
// @match        https://www.youtube.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=youtube.com
// @grant        none
// ==/UserScript==
(function()
{
    // Specify domains and JSON paths to remove
    const domainsToRemove = [
        '*.youtube-nocookie.com/*'
    ];
    const jsonPathsToRemove = [
        'playerResponse.adPlacements',
        'playerResponse.playerAds',
        'adPlacements',
        'playerAds',
        'playerConfig',
        'auxiliaryUi.messageRenderers.enforcementMessageViewModel'
    ];

    const debug = true; // Set to false to disable debug messages

    let unpausedAfterSkip = 0; //This is used to check if the video has been unpaused already

    if (debug) console.log("Script started");

    // Old variable but could work in some cases
    window.__ytplayer_adblockDetected = false;

    removeJsonPaths(domainsToRemove, jsonPathsToRemove);
    setInterval(() =>
    {
        const popup = document.querySelector("body > ytd-app > ytd-popup-container > tp-yt-paper-dialog");
        if (popup)
        {
            if (debug) console.log("Remove Adblock Thing: Popup detected, removing...");
            popup.remove();
            unpausedAfterSkip = 2;
            if (debug) console.log("Remove Adblock Thing: Popup removed");
        }

        // Check if the video is paused after removing the popup
        if (unpausedAfterSkip > 0)
        {
            console.log("pong");
            const video1 = document.querySelector("#movie_player > video.html5-main-video");
            const video2 = document.querySelector("#movie_player > .html5-video-container > video");
            if (video1)
            {
                if (video1.paused)
                {
                    // Simulate pressing the "k" key to unpause the video
                    const keyEvent = new KeyboardEvent("keydown",
                    {
                        key: "k",
                        code: "KeyK",
                        keyCode: 75,
                        which: 75,
                        bubbles: true,
                        cancelable: true,
                        view: window
                    });
                    document.dispatchEvent(keyEvent);
                    unpausedAfterSkip = 0;
                    if (debug) console.log("Remove Adblock Thing: Unpaused video using 'k' key");
                }
                else if (unpausedAfterSkip > 0)
                {
                    unpausedAfterSkip--;
                }
            }
            if (video2)
            {
                if (video2.paused)
                {
                    // Simulate pressing the "k" key to unpause the video
                    const keyEvent = new KeyboardEvent("keydown",
                    {
                        key: "k",
                        code: "KeyK",
                        keyCode: 75,
                        which: 75,
                        bubbles: true,
                        cancelable: true,
                        view: window
                    });
                    document.dispatchEvent(keyEvent);
                    unpausedAfterSkip = 0;
                    if (debug) console.log("Remove Adblock Thing: Unpaused video using 'k' key");
                }
                else if (unpausedAfterSkip > 0)
                {
                    unpausedAfterSkip--;
                }
            }
        }

    }, 1000);

    // Observe and remove ads when new content is loaded dynamically
    const observer = new MutationObserver(() =>
    {
        removeJsonPaths(domainsToRemove, jsonPathsToRemove);
    });

    const observerConfig = {
        childList: true,
        subtree: true
    };
    observer.observe(document.body, observerConfig);

    function removeJsonPaths(domains, jsonPaths)
    {
        const currentDomain = window.location.hostname;
        if (domains.includes(currentDomain))
        {
            jsonPaths.forEach(jsonPath =>
            {
                const pathParts = jsonPath.split('.');
                let obj = window;
                for (const part of pathParts)
                {
                    if (obj.hasOwnProperty(part))
                    {
                        obj = obj[part];
                    }
                    else
                    {
                        break;
                    }
                }
                obj = undefined;
            });
        }
    }


})();
